/*
 * Copyright (C) 2017 Diana Botez <dia.botez at gmail.com> - All Rights Reserved
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * Althering the content of this licence under any circumstances
 * is strictly forbidden.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 */
package operationplanning.EN;

import operationplanning.EN.Planning_EN;
import java.util.Calendar;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import operationplanning.commonFiles.TimeTableModels;
import org.jdesktop.swingx.table.DatePickerCellEditor;

/**
 * @abstract
 *
 * @author Diana Botez
 */
public class OperationRoomPanel_EN extends javax.swing.JPanel {

    private DefaultTableModel operationRoomTableModelES;

    private DefaultComboBoxModel morningStartTimeTableModel;
    private DefaultComboBoxModel morningEndTimeTableModel;
    private DefaultComboBoxModel eveningStartTimeTableModel;
    private DefaultComboBoxModel eveningEndTimeTableModel;

    private JComboBox startTimeTableComboBox = new JComboBox();
    private JComboBox endTimeTableComboBox = new JComboBox();

    /**
     * Creates new form OperationRoomPanelES
     */
    public OperationRoomPanel_EN(boolean morningOR) {
        // <editor-fold defaultstate="collapsed" desc="Initialize variables">
        operationRoomTableModelES = new DefaultTableModel(
                new String[]{"Date", "Starting hour", "Ending hour"},
                0) //<editor-fold defaultstate="collapsed" desc="set column classes">
        {
            @Override
            public Class getColumnClass(int col) {
                String name = operationRoomTableModelES.getColumnName(col);

                if (name.equals("Date")) {
                    return java.util.Date.class;
                } else {
                    return java.lang.String.class;
                }
            }
        } //</editor-fold>
                ;

        morningStartTimeTableModel = TimeTableModels.getMorningTimeTableModel();
        morningEndTimeTableModel = TimeTableModels.getMorningTimeTableModel();
        eveningStartTimeTableModel = TimeTableModels.getAfternoonTimeTableModel();
        eveningEndTimeTableModel = TimeTableModels.getAfternoonTimeTableModel();

        if (morningOR == true) {
            startTimeTableComboBox.setModel(morningStartTimeTableModel);
            startTimeTableComboBox.setSelectedIndex(0);

            endTimeTableComboBox.setModel(morningEndTimeTableModel);
            endTimeTableComboBox.removeItemAt(0);
            endTimeTableComboBox.setSelectedItem("15:00");
        } else {
            startTimeTableComboBox.setModel(eveningStartTimeTableModel);
            startTimeTableComboBox.setSelectedItem("15:30");

            endTimeTableComboBox.setModel(eveningEndTimeTableModel);
            endTimeTableComboBox.setSelectedItem("20:00");
        }
        //</editor-fold>

        /*Call initComponents method*/
        initComponents();

        // <editor-fold defaultstate="collapsed" desc="Update column types and editors">
        TableColumn dateColumn = operationRoomTable.getColumn("Date");
        dateColumn.setCellEditor(new DatePickerCellEditor());

        TableColumn startTimeColumn = operationRoomTable.getColumn("Starting hour");
        startTimeColumn.setCellEditor(new DefaultCellEditor(startTimeTableComboBox));

        TableColumn endTimeColumn = operationRoomTable.getColumn("Ending hour");
        endTimeColumn.setCellEditor(new DefaultCellEditor(endTimeTableComboBox));
        
        Calendar c = Calendar.getInstance();
        c.set(2017, 2, 15);
        if (morningOR == true) {
            operationRoomTableModelES.addRow(new Object[]{c.getTime(), "8:35", "12:05"});
        } else {
            operationRoomTableModelES.addRow(new Object[]{c.getTime(), "15:35", "20:05"});
        }
        //</editor-fold>
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        operationRoomScrollPane = new javax.swing.JScrollPane();
        operationRoomTable = new javax.swing.JTable();
        buttonsPanel = new javax.swing.JPanel();
        addORButton = new javax.swing.JButton();
        deleteORButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(640, 480));

        operationRoomTable.setModel(operationRoomTableModelES);
        operationRoomScrollPane.setViewportView(operationRoomTable);

        addORButton.setText("Add new operation room");
        addORButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addORButtonActionPerformed(evt);
            }
        });

        deleteORButton.setText("Delete this operation room");
        deleteORButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteORButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addORButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteORButton, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addORButton)
                    .addComponent(deleteORButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(operationRoomScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(operationRoomScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addORButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addORButtonActionPerformed
        Object[] o = {"Add morning OR", "Add afternoon OR", "Cancel"};
        int opt = JOptionPane.showOptionDialog(this, "Do you want to add a new operation room? If yes, is it a morning or afternoon Operation Room? ", "Add new Operation Room", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, o, o[2]);

        //opt is the index in the o vector for the selected option
        switch (opt) {
            case 0:
                Planning_EN.addNewOperationRoom(true);
                break;
            case 1:
                Planning_EN.addNewOperationRoom(false);
                break;
            default:
        }
    }//GEN-LAST:event_addORButtonActionPerformed

    private void deleteORButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteORButtonActionPerformed
        Object[] o = {"Yes", "No", "Cancel"};
        int opt = JOptionPane.showOptionDialog(this, "You are about to delete this operation room. Are you sure you want to delete all the data about this operation room from the data base?", "Warning! Delete operation room", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, o, o[2]);

        switch (opt) {
            case 0:
                Planning_EN.removeOperatingRoom(this);
                break;
            case 1:
            default:
        }
    }//GEN-LAST:event_deleteORButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addORButton;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton deleteORButton;
    private javax.swing.JScrollPane operationRoomScrollPane;
    private javax.swing.JTable operationRoomTable;
    // End of variables declaration//GEN-END:variables


}
